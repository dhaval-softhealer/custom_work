# Copyright (C) Softhealer Technologies.
# Part of Softhealer Technologies.


from odoo import models, fields, _, api

class shPurchaseOrder(models.Model):
    _inherit = 'purchase.order'

    sh_sale_order_id = fields.Many2one('sale.order', string="Sale order" ,)
    sh_sale_order_count = fields.Integer(string='Sale Order Count',compute='_count_sale_order', readonly=True,)
    sh_BOM_count = fields.Integer(string='BOM Count',compute='_count_bom', readonly=True,)
    sh_mrp_count = fields.Integer(string='BOM Count',compute='_count_mrp', readonly=True,)
    sh_attechment_count = fields.Integer(string='Attachments Count',compute='_count_attachment', readonly=True,)

    def _count_attachment(self):
        for order in self:
            attachments = self.env['ir.attachment'].search([('res_id','=',order.id)])
            if attachments:
                order.sh_attechment_count = len(attachments.ids)
            else:
                order.sh_attechment_count = 0
                
    def _count_bom(self):
        for order in self:
            if order.sh_sale_order_id:
                bom_orders_list = []
                for orderline in order.sh_sale_order_id.order_line:
                    bom_orders = self.env['mrp.bom'].search([['id', 'in', orderline.product_id.bom_ids.ids]])
                    bom_orders_list.extend(bom_orders)
                if bom_orders_list:
                    order.sh_BOM_count = len(bom_orders_list)
                else:
                    order.sh_BOM_count = 0
            else:
                order.sh_BOM_count = 0

    def _count_mrp(self):
        for order in self:
            mrp_orders = self.env['mrp.production'].search( [('id','=',self.sh_sale_order_id.mrp_production_ids.ids)])
            if mrp_orders:
                order.sh_mrp_count = len(mrp_orders.ids)
            else:
                order.sh_mrp_count = 0

    def _count_sale_order(self):
        for order in self:
            sale_orders = self.env['sale.order'].search( [('sh_purchase_order_id','=',order.id)])
            if sale_orders:
                order.sh_sale_order_count = len(sale_orders.ids)
            else:
                order.sh_sale_order_count = 0

    @api.model
    def default_get(self, default_fields):
        defaults = super().default_get(default_fields)
        defaults['sh_sale_order_id'] = self.env.context.get('sh_sale_order_id')
        return defaults
    
    def action_view_mrp_bom(self):
        result = {
            "type": "ir.actions.act_window",
            "res_model": "mrp.bom",
            "name": _("Bills of Materials"),
        }

        domain_ids = []
        for each_sale_order in self.sh_sale_order_id:
            for orderline in each_sale_order.order_line:
                domain_ids.extend(orderline.product_id.bom_ids.ids)
        
        result["domain"] = [['id', 'in', domain_ids]]
        
        if self.sh_BOM_count == 1 and domain_ids:
            result.update({
                'view_mode': 'form',
                'res_id': domain_ids[0],
            })
        else:
            result.update({
                'view_mode': 'tree,form',
            })
        
        return result

        
    def action_view_attachments(self):
          return {
            'name': _('Attachments'),
            'type': 'ir.actions.act_window',
            'res_model': 'ir.attachment',
            'view_mode': 'tree',
            'views': [(self.env.ref('sh_sale_customization.sh_view_attachment_tree').id, 'tree')],
            'domain' : [('res_id','=',self.id),('res_name','=',self.name),('res_model',"=",'purchase.order')],
        }

    def action_view_so(self):
        action_vals = {
            'name': _('Sale Orders'),
            'type': 'ir.actions.act_window',
            'res_model': 'sale.order',
            'view_mode': 'tree,form',
            'domain' : [('sh_purchase_order_id','=',self.id)],
        }
        if self.sh_sale_order_count == 1:
            action_vals.update({
                'view_mode': 'form',
                'res_id': self.sh_sale_order_id.id,
            })
        else:
            action_vals.update({
                'view_mode': 'list, form',
            })
        return action_vals
        

    def action_view_mrp_order(self):
        result = {
            'res_model': 'mrp.production',
            'type': 'ir.actions.act_window',
            'name': _("Manufacturing Orders Generated by %s", self.name),
        }
        domain_ids = self.sh_sale_order_id.mrp_production_ids.ids

        result["domain"] = [('id', 'in', domain_ids)]

        if self.sh_mrp_count == 1 and domain_ids:
            result.update({
                'view_mode': 'form',
                'res_id': domain_ids[0],
            })
        else:
            result.update({
                'view_mode': 'tree,form',
            })

        return result

    @api.model
    def create(self, values):
        result = super(shPurchaseOrder, self).create(values)
        if result.sh_sale_order_id:
            result.sh_sale_order_id.sh_purchase_order_id = result.id
        return result
    